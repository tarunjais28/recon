// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `recon_atm_a2.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq, Clone, Default)]
pub struct OutputAccount {
    // message fields
    pub datetime: i64,
    pub ref_no: i64,
    pub crd_no: ::std::string::String,
    pub acc: ::std::string::String,
    pub txn: ::std::string::String,
    pub amount: f64,
    pub extra: ::std::string::String,
    pub resp: i64,
    pub status: ::std::string::String,
    pub term_id: i64,
    pub ccy: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // int64 datetime = 1;

    pub fn get_datetime(&self) -> i64 {
        self.datetime
    }
    pub fn clear_datetime(&mut self) {
        self.datetime = 0;
    }

    // Param is passed by value, moved
    pub fn set_datetime(&mut self, v: i64) {
        self.datetime = v;
    }

    // int64 ref_no = 2;

    pub fn get_ref_no(&self) -> i64 {
        self.ref_no
    }
    pub fn clear_ref_no(&mut self) {
        self.ref_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_ref_no(&mut self, v: i64) {
        self.ref_no = v;
    }

    // string crd_no = 3;

    pub fn get_crd_no(&self) -> &str {
        &self.crd_no
    }
    pub fn clear_crd_no(&mut self) {
        self.crd_no.clear();
    }

    // Param is passed by value, moved
    pub fn set_crd_no(&mut self, v: ::std::string::String) {
        self.crd_no = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crd_no(&mut self) -> &mut ::std::string::String {
        &mut self.crd_no
    }

    // Take field
    pub fn take_crd_no(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.crd_no, ::std::string::String::new())
    }

    // string acc = 4;

    pub fn get_acc(&self) -> &str {
        &self.acc
    }
    pub fn clear_acc(&mut self) {
        self.acc.clear();
    }

    // Param is passed by value, moved
    pub fn set_acc(&mut self, v: ::std::string::String) {
        self.acc = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_acc(&mut self) -> &mut ::std::string::String {
        &mut self.acc
    }

    // Take field
    pub fn take_acc(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.acc, ::std::string::String::new())
    }

    // string txn = 5;

    pub fn get_txn(&self) -> &str {
        &self.txn
    }
    pub fn clear_txn(&mut self) {
        self.txn.clear();
    }

    // Param is passed by value, moved
    pub fn set_txn(&mut self, v: ::std::string::String) {
        self.txn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn(&mut self) -> &mut ::std::string::String {
        &mut self.txn
    }

    // Take field
    pub fn take_txn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txn, ::std::string::String::new())
    }

    // double amount = 6;

    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    // string extra = 7;

    pub fn get_extra(&self) -> &str {
        &self.extra
    }
    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::string::String) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extra(&mut self) -> &mut ::std::string::String {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.extra, ::std::string::String::new())
    }

    // int64 resp = 8;

    pub fn get_resp(&self) -> i64 {
        self.resp
    }
    pub fn clear_resp(&mut self) {
        self.resp = 0;
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: i64) {
        self.resp = v;
    }

    // string status = 9;

    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // int64 term_id = 10;

    pub fn get_term_id(&self) -> i64 {
        self.term_id
    }
    pub fn clear_term_id(&mut self) {
        self.term_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_term_id(&mut self, v: i64) {
        self.term_id = v;
    }

    // string ccy = 11;

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.datetime = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.ref_no = tmp;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.crd_no,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.acc)?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.txn)?;
                }
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.extra,
                    )?;
                }
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.resp = tmp;
                }
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.status,
                    )?;
                }
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.term_id = tmp;
                }
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.datetime != 0 {
            my_size += ::protobuf::rt::value_size(
                1,
                self.datetime,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.ref_no != 0 {
            my_size +=
                ::protobuf::rt::value_size(2, self.ref_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.crd_no.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.crd_no);
        }
        if !self.acc.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.acc);
        }
        if !self.txn.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.txn);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.extra.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.extra);
        }
        if self.resp != 0 {
            my_size +=
                ::protobuf::rt::value_size(8, self.resp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.status);
        }
        if self.term_id != 0 {
            my_size += ::protobuf::rt::value_size(
                10,
                self.term_id,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.ccy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.datetime != 0 {
            os.write_int64(1, self.datetime)?;
        }
        if self.ref_no != 0 {
            os.write_int64(2, self.ref_no)?;
        }
        if !self.crd_no.is_empty() {
            os.write_string(3, &self.crd_no)?;
        }
        if !self.acc.is_empty() {
            os.write_string(4, &self.acc)?;
        }
        if !self.txn.is_empty() {
            os.write_string(5, &self.txn)?;
        }
        if self.amount != 0. {
            os.write_double(6, self.amount)?;
        }
        if !self.extra.is_empty() {
            os.write_string(7, &self.extra)?;
        }
        if self.resp != 0 {
            os.write_int64(8, self.resp)?;
        }
        if !self.status.is_empty() {
            os.write_string(9, &self.status)?;
        }
        if self.term_id != 0 {
            os.write_int64(10, self.term_id)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(11, &self.ccy)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "datetime",
                    |m: &OutputAccount| &m.datetime,
                    |m: &mut OutputAccount| &mut m.datetime,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "ref_no",
                    |m: &OutputAccount| &m.ref_no,
                    |m: &mut OutputAccount| &mut m.ref_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "crd_no",
                    |m: &OutputAccount| &m.crd_no,
                    |m: &mut OutputAccount| &mut m.crd_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "acc",
                    |m: &OutputAccount| &m.acc,
                    |m: &mut OutputAccount| &mut m.acc,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "txn",
                    |m: &OutputAccount| &m.txn,
                    |m: &mut OutputAccount| &mut m.txn,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "amount",
                    |m: &OutputAccount| &m.amount,
                    |m: &mut OutputAccount| &mut m.amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "extra",
                    |m: &OutputAccount| &m.extra,
                    |m: &mut OutputAccount| &mut m.extra,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "resp",
                    |m: &OutputAccount| &m.resp,
                    |m: &mut OutputAccount| &mut m.resp,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "status",
                    |m: &OutputAccount| &m.status,
                    |m: &mut OutputAccount| &mut m.status,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "term_id",
                    |m: &OutputAccount| &m.term_id,
                    |m: &mut OutputAccount| &mut m.term_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ccy",
                    |m: &OutputAccount| &m.ccy,
                    |m: &mut OutputAccount| &mut m.ccy,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(OutputAccount::new) }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.datetime = 0;
        self.ref_no = 0;
        self.crd_no.clear();
        self.acc.clear();
        self.txn.clear();
        self.amount = 0.;
        self.extra.clear();
        self.resp = 0;
        self.status.clear();
        self.term_id = 0;
        self.ccy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12recon_atm_a2.proto\"\x82\x02\n\rOutputAccount\x12\x1a\n\x08datetim\
    e\x18\x01\x20\x01(\x03R\x08datetime\x12\x15\n\x06ref_no\x18\x02\x20\x01(\
    \x03R\x05refNo\x12\x15\n\x06crd_no\x18\x03\x20\x01(\tR\x05crdNo\x12\x10\
    \n\x03acc\x18\x04\x20\x01(\tR\x03acc\x12\x10\n\x03txn\x18\x05\x20\x01(\t\
    R\x03txn\x12\x16\n\x06amount\x18\x06\x20\x01(\x01R\x06amount\x12\x14\n\
    \x05extra\x18\x07\x20\x01(\tR\x05extra\x12\x12\n\x04resp\x18\x08\x20\x01\
    (\x03R\x04resp\x12\x16\n\x06status\x18\t\x20\x01(\tR\x06status\x12\x17\n\
    \x07term_id\x18\n\x20\x01(\x03R\x06termId\x12\x10\n\x03ccy\x18\x0b\x20\
    \x01(\tR\x03ccyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
