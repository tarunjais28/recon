// This file is generated by rust-protobuf 2.11.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `recon_atm_b1.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_11_0;

#[derive(PartialEq, Clone, Default)]
pub struct OutputAccount {
    // message fields
    pub s_no: i64,
    pub acc_no: i64,
    pub machin: ::std::string::String,
    pub customer_name: ::std::string::String,
    pub deposit_reference: ::std::string::String,
    pub typ: ::std::string::String,
    pub stat: ::std::string::String,
    pub ccy: ::std::string::String,
    pub amount: f64,
    pub txn_ref: ::std::string::String,
    pub txn_datetime: i64,
    pub txn_date: i64,
    pub txn_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputAccount {
    fn default() -> &'a OutputAccount {
        <OutputAccount as ::protobuf::Message>::default_instance()
    }
}

impl OutputAccount {
    pub fn new() -> OutputAccount {
        ::std::default::Default::default()
    }

    // int64 s_no = 1;

    pub fn get_s_no(&self) -> i64 {
        self.s_no
    }
    pub fn clear_s_no(&mut self) {
        self.s_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_s_no(&mut self, v: i64) {
        self.s_no = v;
    }

    // int64 acc_no = 2;

    pub fn get_acc_no(&self) -> i64 {
        self.acc_no
    }
    pub fn clear_acc_no(&mut self) {
        self.acc_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_acc_no(&mut self, v: i64) {
        self.acc_no = v;
    }

    // string machin = 3;

    pub fn get_machin(&self) -> &str {
        &self.machin
    }
    pub fn clear_machin(&mut self) {
        self.machin.clear();
    }

    // Param is passed by value, moved
    pub fn set_machin(&mut self, v: ::std::string::String) {
        self.machin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_machin(&mut self) -> &mut ::std::string::String {
        &mut self.machin
    }

    // Take field
    pub fn take_machin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.machin, ::std::string::String::new())
    }

    // string customer_name = 4;

    pub fn get_customer_name(&self) -> &str {
        &self.customer_name
    }
    pub fn clear_customer_name(&mut self) {
        self.customer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_customer_name(&mut self, v: ::std::string::String) {
        self.customer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customer_name(&mut self) -> &mut ::std::string::String {
        &mut self.customer_name
    }

    // Take field
    pub fn take_customer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customer_name, ::std::string::String::new())
    }

    // string deposit_reference = 5;

    pub fn get_deposit_reference(&self) -> &str {
        &self.deposit_reference
    }
    pub fn clear_deposit_reference(&mut self) {
        self.deposit_reference.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_reference(&mut self, v: ::std::string::String) {
        self.deposit_reference = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_reference(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_reference
    }

    // Take field
    pub fn take_deposit_reference(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_reference, ::std::string::String::new())
    }

    // string typ = 6;

    pub fn get_typ(&self) -> &str {
        &self.typ
    }
    pub fn clear_typ(&mut self) {
        self.typ.clear();
    }

    // Param is passed by value, moved
    pub fn set_typ(&mut self, v: ::std::string::String) {
        self.typ = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typ(&mut self) -> &mut ::std::string::String {
        &mut self.typ
    }

    // Take field
    pub fn take_typ(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.typ, ::std::string::String::new())
    }

    // string stat = 7;

    pub fn get_stat(&self) -> &str {
        &self.stat
    }
    pub fn clear_stat(&mut self) {
        self.stat.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat(&mut self, v: ::std::string::String) {
        self.stat = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat(&mut self) -> &mut ::std::string::String {
        &mut self.stat
    }

    // Take field
    pub fn take_stat(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat, ::std::string::String::new())
    }

    // string ccy = 8;

    pub fn get_ccy(&self) -> &str {
        &self.ccy
    }
    pub fn clear_ccy(&mut self) {
        self.ccy.clear();
    }

    // Param is passed by value, moved
    pub fn set_ccy(&mut self, v: ::std::string::String) {
        self.ccy = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ccy(&mut self) -> &mut ::std::string::String {
        &mut self.ccy
    }

    // Take field
    pub fn take_ccy(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ccy, ::std::string::String::new())
    }

    // double amount = 9;

    pub fn get_amount(&self) -> f64 {
        self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount = 0.;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: f64) {
        self.amount = v;
    }

    // string txn_ref = 10;

    pub fn get_txn_ref(&self) -> &str {
        &self.txn_ref
    }
    pub fn clear_txn_ref(&mut self) {
        self.txn_ref.clear();
    }

    // Param is passed by value, moved
    pub fn set_txn_ref(&mut self, v: ::std::string::String) {
        self.txn_ref = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txn_ref(&mut self) -> &mut ::std::string::String {
        &mut self.txn_ref
    }

    // Take field
    pub fn take_txn_ref(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txn_ref, ::std::string::String::new())
    }

    // int64 txn_datetime = 11;

    pub fn get_txn_datetime(&self) -> i64 {
        self.txn_datetime
    }
    pub fn clear_txn_datetime(&mut self) {
        self.txn_datetime = 0;
    }

    // Param is passed by value, moved
    pub fn set_txn_datetime(&mut self, v: i64) {
        self.txn_datetime = v;
    }

    // int64 txn_date = 12;

    pub fn get_txn_date(&self) -> i64 {
        self.txn_date
    }
    pub fn clear_txn_date(&mut self) {
        self.txn_date = 0;
    }

    // Param is passed by value, moved
    pub fn set_txn_date(&mut self, v: i64) {
        self.txn_date = v;
    }

    // int64 txn_time = 13;

    pub fn get_txn_time(&self) -> i64 {
        self.txn_time
    }
    pub fn clear_txn_time(&mut self) {
        self.txn_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_txn_time(&mut self, v: i64) {
        self.txn_time = v;
    }
}

impl ::protobuf::Message for OutputAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(
        &mut self,
        is: &mut ::protobuf::CodedInputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.s_no = tmp;
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.acc_no = tmp;
                }
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.machin,
                    )?;
                }
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.customer_name,
                    )?;
                }
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.deposit_reference,
                    )?;
                }
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.typ)?;
                }
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.stat,
                    )?;
                }
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ccy)?;
                }
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_double()?;
                    self.amount = tmp;
                }
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(
                        wire_type,
                        is,
                        &mut self.txn_ref,
                    )?;
                }
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.txn_datetime = tmp;
                }
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.txn_date = tmp;
                }
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(
                            wire_type,
                        ));
                    }
                    let tmp = is.read_int64()?;
                    self.txn_time = tmp;
                }
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(
                        field_number,
                        wire_type,
                        is,
                        self.mut_unknown_fields(),
                    )?;
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.s_no != 0 {
            my_size +=
                ::protobuf::rt::value_size(1, self.s_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.acc_no != 0 {
            my_size +=
                ::protobuf::rt::value_size(2, self.acc_no, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.machin.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.machin);
        }
        if !self.customer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.customer_name);
        }
        if !self.deposit_reference.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.deposit_reference);
        }
        if !self.typ.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.typ);
        }
        if !self.stat.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.stat);
        }
        if !self.ccy.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.ccy);
        }
        if self.amount != 0. {
            my_size += 9;
        }
        if !self.txn_ref.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.txn_ref);
        }
        if self.txn_datetime != 0 {
            my_size += ::protobuf::rt::value_size(
                11,
                self.txn_datetime,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.txn_date != 0 {
            my_size += ::protobuf::rt::value_size(
                12,
                self.txn_date,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        if self.txn_time != 0 {
            my_size += ::protobuf::rt::value_size(
                13,
                self.txn_time,
                ::protobuf::wire_format::WireTypeVarint,
            );
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(
        &self,
        os: &mut ::protobuf::CodedOutputStream<'_>,
    ) -> ::protobuf::ProtobufResult<()> {
        if self.s_no != 0 {
            os.write_int64(1, self.s_no)?;
        }
        if self.acc_no != 0 {
            os.write_int64(2, self.acc_no)?;
        }
        if !self.machin.is_empty() {
            os.write_string(3, &self.machin)?;
        }
        if !self.customer_name.is_empty() {
            os.write_string(4, &self.customer_name)?;
        }
        if !self.deposit_reference.is_empty() {
            os.write_string(5, &self.deposit_reference)?;
        }
        if !self.typ.is_empty() {
            os.write_string(6, &self.typ)?;
        }
        if !self.stat.is_empty() {
            os.write_string(7, &self.stat)?;
        }
        if !self.ccy.is_empty() {
            os.write_string(8, &self.ccy)?;
        }
        if self.amount != 0. {
            os.write_double(9, self.amount)?;
        }
        if !self.txn_ref.is_empty() {
            os.write_string(10, &self.txn_ref)?;
        }
        if self.txn_datetime != 0 {
            os.write_int64(11, self.txn_datetime)?;
        }
        if self.txn_date != 0 {
            os.write_int64(12, self.txn_date)?;
        }
        if self.txn_time != 0 {
            os.write_int64(13, self.txn_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputAccount {
        OutputAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "s_no",
                    |m: &OutputAccount| &m.s_no,
                    |m: &mut OutputAccount| &mut m.s_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "acc_no",
                    |m: &OutputAccount| &m.acc_no,
                    |m: &mut OutputAccount| &mut m.acc_no,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "machin",
                    |m: &OutputAccount| &m.machin,
                    |m: &mut OutputAccount| &mut m.machin,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "customer_name",
                    |m: &OutputAccount| &m.customer_name,
                    |m: &mut OutputAccount| &mut m.customer_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "deposit_reference",
                    |m: &OutputAccount| &m.deposit_reference,
                    |m: &mut OutputAccount| &mut m.deposit_reference,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "typ",
                    |m: &OutputAccount| &m.typ,
                    |m: &mut OutputAccount| &mut m.typ,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "stat",
                    |m: &OutputAccount| &m.stat,
                    |m: &mut OutputAccount| &mut m.stat,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "ccy",
                    |m: &OutputAccount| &m.ccy,
                    |m: &mut OutputAccount| &mut m.ccy,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeDouble,
                >(
                    "amount",
                    |m: &OutputAccount| &m.amount,
                    |m: &mut OutputAccount| &mut m.amount,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeString,
                >(
                    "txn_ref",
                    |m: &OutputAccount| &m.txn_ref,
                    |m: &mut OutputAccount| &mut m.txn_ref,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "txn_datetime",
                    |m: &OutputAccount| &m.txn_datetime,
                    |m: &mut OutputAccount| &mut m.txn_datetime,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "txn_date",
                    |m: &OutputAccount| &m.txn_date,
                    |m: &mut OutputAccount| &mut m.txn_date,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<
                    _,
                    ::protobuf::types::ProtobufTypeInt64,
                >(
                    "txn_time",
                    |m: &OutputAccount| &m.txn_time,
                    |m: &mut OutputAccount| &mut m.txn_time,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputAccount>(
                    "OutputAccount",
                    fields,
                    file_descriptor_proto(),
                )
            })
        }
    }

    fn default_instance() -> &'static OutputAccount {
        static mut instance: ::protobuf::lazy::Lazy<OutputAccount> = ::protobuf::lazy::Lazy::INIT;
        unsafe { instance.get(OutputAccount::new) }
    }
}

impl ::protobuf::Clear for OutputAccount {
    fn clear(&mut self) {
        self.s_no = 0;
        self.acc_no = 0;
        self.machin.clear();
        self.customer_name.clear();
        self.deposit_reference.clear();
        self.typ.clear();
        self.stat.clear();
        self.ccy.clear();
        self.amount = 0.;
        self.txn_ref.clear();
        self.txn_datetime = 0;
        self.txn_date = 0;
        self.txn_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12recon_atm_b1.proto\"\xe5\x02\n\rOutputAccount\x12\x11\n\x04s_no\
    \x18\x01\x20\x01(\x03R\x03sNo\x12\x15\n\x06acc_no\x18\x02\x20\x01(\x03R\
    \x05accNo\x12\x16\n\x06machin\x18\x03\x20\x01(\tR\x06machin\x12#\n\rcust\
    omer_name\x18\x04\x20\x01(\tR\x0ccustomerName\x12+\n\x11deposit_referenc\
    e\x18\x05\x20\x01(\tR\x10depositReference\x12\x10\n\x03typ\x18\x06\x20\
    \x01(\tR\x03typ\x12\x12\n\x04stat\x18\x07\x20\x01(\tR\x04stat\x12\x10\n\
    \x03ccy\x18\x08\x20\x01(\tR\x03ccy\x12\x16\n\x06amount\x18\t\x20\x01(\
    \x01R\x06amount\x12\x17\n\x07txn_ref\x18\n\x20\x01(\tR\x06txnRef\x12!\n\
    \x0ctxn_datetime\x18\x0b\x20\x01(\x03R\x0btxnDatetime\x12\x19\n\x08txn_d\
    ate\x18\x0c\x20\x01(\x03R\x07txnDate\x12\x19\n\x08txn_time\x18\r\x20\x01\
    (\x03R\x07txnTimeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<
    ::protobuf::descriptor::FileDescriptorProto,
> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}
